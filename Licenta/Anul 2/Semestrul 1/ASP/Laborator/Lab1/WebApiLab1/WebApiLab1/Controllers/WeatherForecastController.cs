using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace WebApiLab1.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class WeatherForecastController : ControllerBase
    {
        private static List<string> Summaries = new List<string>
        {
            "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
        };

        private readonly ILogger<WeatherForecastController> _logger;

        public WeatherForecastController(ILogger<WeatherForecastController> logger)
        {
            _logger = logger;
        }

        //Basic Get to get information of weather forecast
        [HttpGet]
        public async Task<IActionResult> Get()
        {
            try
            {
                //Error to force the catch exception and respond with BadRequest
                //Can be commented to move over and have a successful GET request
                //int.Parse("test");

                //Code autogenerated by Visual on project creation
                //Returns a List of 5 items consisting of the day, a random temparture and a random Summary
                var rng = new Random();
                return Ok(
                    Enumerable.Range(1, 5).Select(index => new WeatherForecast
                    {
                        Date = DateTime.Now.AddDays(index),
                        TemperatureC = rng.Next(-20, 55),
                        Summary = Summaries[rng.Next(Summaries.Count)]
                    })
                .ToList());
            }
            catch(Exception ex)
            {
                return BadRequest("Failed to execute.");
            }
        }
        
        //Get information on whether the weather is of type provided by the client before requesting
        [HttpGet("isWeather/{type}")]
        public async Task<IActionResult> GetIsGoodWeather([FromRoute] string type)
        {
            try
            {
                var weatherNow = "Good";

                if (weatherNow == type)
                {
                    return Ok(true);
                }

                return Ok(false);
            }
            catch (Exception ex)
            {
                return BadRequest("Failed to execute.");
            }
        }


        //Add a new summary to the summaries list 
        [HttpPost]
        public async Task<IActionResult> Create()
        {
            Summaries.Add("Very Hot");

            return Ok();
        }

        //Update the summaries list
        [HttpPut]
        public async Task<IActionResult> Update()
        {
            Summaries = new List<string> { "Freezing", "Bracing" };

            return Ok();
        }


        //Remove a summary from the list
        [HttpDelete("{type}")]
        public async Task<IActionResult> Delete([FromRoute] string type)
        {
            Summaries.Remove(type);

            return Ok();
        }

        //CRUD
        //C- create (POST)
        //R- read (GET)
        //U- update (PUT/PATCH)
        //D- delete (DELETE)
    }
}
