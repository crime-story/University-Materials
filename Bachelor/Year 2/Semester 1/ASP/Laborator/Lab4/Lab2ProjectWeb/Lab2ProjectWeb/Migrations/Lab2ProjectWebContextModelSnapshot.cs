// <auto-generated />
using Lab2ProjectWeb.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Lab2ProjectWeb.Migrations
{
    [DbContext(typeof(Lab2ProjectWebContext))]
    partial class Lab2ProjectWebContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Lab2ProjectWeb.Entities.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId")
                        .IsUnique()
                        .HasFilter("[AuthorId] IS NOT NULL");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Lab2ProjectWeb.Entities.Author", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Lab2ProjectWeb.Entities.AuthorConcurs", b =>
                {
                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcursId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AuthorId", "ConcursId");

                    b.HasIndex("ConcursId");

                    b.ToTable("AuthorConcursuri");
                });

            modelBuilder.Entity("Lab2ProjectWeb.Entities.Book", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Lab2ProjectWeb.Entities.Concurs", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Concursuri");
                });

            modelBuilder.Entity("Lab2ProjectWeb.Entities.Address", b =>
                {
                    b.HasOne("Lab2ProjectWeb.Entities.Author", "Author")
                        .WithOne("Address")
                        .HasForeignKey("Lab2ProjectWeb.Entities.Address", "AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Lab2ProjectWeb.Entities.AuthorConcurs", b =>
                {
                    b.HasOne("Lab2ProjectWeb.Entities.Author", "Author")
                        .WithMany("AuthorConcursuri")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab2ProjectWeb.Entities.Concurs", "Concurs")
                        .WithMany("AuthorConcursuri")
                        .HasForeignKey("ConcursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Concurs");
                });

            modelBuilder.Entity("Lab2ProjectWeb.Entities.Book", b =>
                {
                    b.HasOne("Lab2ProjectWeb.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Lab2ProjectWeb.Entities.Author", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("AuthorConcursuri");

                    b.Navigation("Books");
                });

            modelBuilder.Entity("Lab2ProjectWeb.Entities.Concurs", b =>
                {
                    b.Navigation("AuthorConcursuri");
                });
#pragma warning restore 612, 618
        }
    }
}
