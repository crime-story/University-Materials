1. (Lab:2, Acasa:1) Optimizare BF astfel incat sa afiseze un drum-solutie chiar in momentul in care se adauga nodul scop in coada (sa nu mai astepte sa fie primul in coada). 

2. (Lab:3, Acasa:1) Implementati BF folosind un obiect de tip Queue din Python si afisati toate solutiile. Scoateti apelurile de tip input din programul dat la laborator. Comparati cu cProfile programul vostru  si cel dat la laborator. Ce structura e mai eficienta? Observatie: daca diferentele de timp sunt prea mici, mariti numarul de noduri si de muchii in matricea de adiacenta.

3.(Lab:2, Acasa:1) Sa se afiseze la DF la fiecare expandare nodul expandat si stiva actuala si textul "se intoarce ->" pentru fiecare eliminare de nod din stiva. 
De exemplu, fragment din afisare:
Stiva: a->b->c
Se expandeaza c
Stiva: a->b->c->f
Solutie: a->b->c->f

Se intoarce ->
Se expandeaza c

Stiva: a->b->c->h



4.(Lab:4, Acasa:2) Generati un graf aleator cu un numar mai mare de noduri (dar nu foarte mare), de exemplu N=20 noduri si un numar mare (dar nu foarte mare) de muchii/arce, de exemplu M=200. Nodul 0 va fi nodul start. Alegeti aleator S noduri scop (de exemplu S=5).
Implementati algorimul DF in mod nerecursiv folosind o stiva. Folositi in implementare:
a) o lista pe post de stiva
b) deque din modulul collections
c) LifoQueue din modulul queue
-eventual inca un mod propriu de rezolvare


Folositi cProfiler pentru a analiza performanta pentru cele 3 moduri de implementare, impreuna cu cel de la laborator. Care este cel mai eficient?

5. (Lab:2, Acasa:1) La afisarea solutiei pt DFI, afisati pentru fiecare nod din graf de cate ori a fost extins in total (practic din cate iteratii a facut parte). Puteti folosi un dictionar sau Counter.
