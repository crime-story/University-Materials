-- Popescu Paullo Robertto Karloss --
-- Grupa 406 --

-- Exercitiul 9

-- 9.1
-- Produsele preferate pentru un client citit de la tastatura si produsele cele mai putin comandate vreodata
-- Se afiseaza numele si prenumele clientului, produsele preferate si de cate ori le-a comandat.
-- Se afiseaza numele si prenumele clientului, produsele cele mai putin comandate vreodata si de cate ori le-a comandat.

CREATE OR REPLACE TYPE tab_imb IS
    TABLE OF NUMBER(10);
/

CREATE OR REPLACE TYPE t_array IS 
    VARRAY(10) OF NUMBER(10);
/

CREATE OR REPLACE TYPE result_obj AS OBJECT (
    v_id_feluri_preferate tab_imb,
    varray_ids            t_array
);
/

CREATE OR REPLACE FUNCTION afis_produse_preferate (my_id_client IN client.id_client%TYPE)
RETURN result_obj IS
    TYPE tab_ind IS TABLE OF PLS_INTEGER INDEX BY PLS_INTEGER;
    v_contor                    tab_ind;
    varray_ids                  t_array;
    v_index_max                 PLS_INTEGER;
    v_index_min                 PLS_INTEGER;
    id                          PLS_INTEGER;
    v_id_feluri_preferate       tab_imb;
    ok                          BINARY_INTEGER := 0;
    client_fara_comenzi         EXCEPTION;
    v_err_msg                   VARCHAR2(4000);
BEGIN
    v_id_feluri_preferate := tab_imb();
    varray_ids := t_array();
    
    FOR i IN (SELECT p.id_produs, cont.numar_produse -- CURSOR IMPLICIT
              FROM produs p, continut_comanda cont, comanda cmd
              WHERE my_id_client = cmd.id_client
              AND cont.id_produs = p.id_produs
              AND cmd.id_comanda = cont.id_comanda) LOOP BEGIN
        v_contor(i.id_produs) := v_contor(i.id_produs) + i.numar_produse; -- simulez un vector de frecventa, unde tin de cate ori a fost comandat produsul respectiv
        IF ok = 1 THEN
            IF v_contor(i.id_produs) > v_contor(v_index_max) THEN
                v_index_max := i.id_produs;
            END IF;
        END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN -- intr-un tabel indexat daca nu exista indexul respectiv
        -- se arunca exceptia no data found
            v_contor(i.id_produs) := i.numar_produse; -- initializam numarul de aparitii cu 1
            IF ok = 0 THEN -- daca e primul produs selectat de cursor
                ok := 1;
                v_index_max := i.id_produs;
            END IF;
    END;
    END LOOP;
    IF ok = 0 THEN
        RAISE client_fara_comenzi;
    ELSE
        v_index_min := v_contor.FIRST;
        
        IF v_index_min IS NOT NULL THEN
            id := v_index_min;
            LOOP
                EXIT WHEN id IS NULL;
                IF v_contor(id) < v_contor(v_index_min) THEN
                    v_index_min := id;
                END IF;
                
                id := v_contor.NEXT(id);
            END LOOP;
        END IF;
        
        IF v_contor(v_index_max) != v_contor(v_index_min) THEN
--            DBMS_OUTPUT.PUT_LINE('v_index_max: ' || v_index_max);
--            DBMS_OUTPUT.PUT_LINE('v_contor(v_index_max): ' || v_contor(v_index_max));
--            DBMS_OUTPUT.PUT_LINE('v_index_min: ' || v_index_min);
--            DBMS_OUTPUT.PUT_LINE('v_contor(v_index_min): ' || v_contor(v_index_min));
            id := v_contor.first; -- prima valoare din tabelul indexat (vector frecventa)
            LOOP
                EXIT WHEN id IS NULL;
                IF v_contor(id) = v_contor(v_index_max) THEN
                    v_id_feluri_preferate.extend;
                    v_id_feluri_preferate(v_id_feluri_preferate.LAST) := id;
                END IF;
                
                IF v_contor(id) = v_contor(v_index_min) THEN
                    IF varray_ids.COUNT < varray_ids.LIMIT THEN
                        varray_ids.EXTEND;
                        varray_ids(varray_ids.LAST) := id;
                    END IF;
                END IF;
                id := v_contor.NEXT(id);
            END LOOP;
        ELSE
            id := v_contor.first; -- prima valoare din tabelul indexat (vector frecventa)
            LOOP
                EXIT WHEN id IS NULL;
                IF v_contor(id) = v_contor(v_index_max) THEN
                    v_id_feluri_preferate.extend;
                    v_id_feluri_preferate(v_id_feluri_preferate.LAST) := id;
                END IF;
                id := v_contor.NEXT(id);
            END LOOP;
        END IF;
    END IF;
    RETURN result_obj(v_id_feluri_preferate, varray_ids);

EXCEPTION
    WHEN client_fara_comenzi THEN
        INSERT INTO mesaje(cod_mesaj, mesaj, tip_mesaj, creat_de, creat_la)
        VALUES (cod_mesaj.NEXTVAL, 'Pentru clientul dat de la tastatura cu id ' || my_id_client || ' nu s-a gasit nicio comanda!', 'W', USER, SYSDATE);
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Acest client nu a comandat nimic in viata lui!');
    WHEN OTHERS THEN
        v_err_msg := 'Alta eroare in afis_produse_preferate: ' || SQLERRM;
        INSERT INTO mesaje(cod_mesaj, mesaj, tip_mesaj, creat_de, creat_la)
        VALUES (cod_mesaj.NEXTVAL, 'Alta eroare in afis_produse_preferate: ' || v_err_msg, 'E', USER, SYSDATE);
        COMMIT;
END;
/

DECLARE
    v_id_client_citit       client.id_client%TYPE := &client_id;
    v_result                result_obj;
    my_tab                  tab_imb;
    my_varray               t_array;
    id                      PLS_INTEGER;
    v_nume_produs           produs.nume%TYPE;
    v_nume                  client.nume%TYPE;
    v_prenume               client.prenume%TYPE;
    v_contor                PLS_INTEGER := 0;
BEGIN
    v_result := afis_produse_preferate(v_id_client_citit);
    my_tab := v_result.v_id_feluri_preferate;
    my_varray := v_result.varray_ids;
    
    SELECT c.nume, c.prenume INTO v_nume, v_prenume
    FROM client c
    WHERE c.id_client = v_id_client_citit;
    DBMS_OUTPUT.PUT_LINE('Clientul ' || v_nume || ' ' || v_prenume || ' are urmatoarele produse favorite:');
    id := my_tab.FIRST; -- prima valoare din tabelul indexat (vector frecventa)
    LOOP
        EXIT WHEN id IS NULL;
        SELECT p.nume INTO v_nume_produs
        FROM produs p
        WHERE p.id_produs = my_tab(id);
        -- afisam produsele cu numarul maxim de aparitii
        v_contor := v_contor + 1;
        DBMS_OUTPUT.PUT_LINE(v_contor || '. ' || v_nume_produs);
        id := my_tab.NEXT(id);
    END LOOP;
    

    IF my_varray.COUNT = 0 THEN
        DBMS_OUTPUT.PUT_LINE('Niciun produs nu a fost comandat de mai putine ori fata de celelalte.');
    ELSE
        DBMS_OUTPUT.PUT_LINE('');
        DBMS_OUTPUT.PUT_LINE('Produse cel mai putin comandate: ');
        v_contor := 0;
        FOR idx IN 1..my_varray.COUNT LOOP
            SELECT p.nume
              INTO v_nume_produs
              FROM produs p
             WHERE p.id_produs = my_varray(idx);
            v_contor := v_contor + 1;
            DBMS_OUTPUT.PUT_LINE(v_contor || '. ' || v_nume_produs);
        END LOOP;
    END IF;
END;
/

-- Exercitiul 9.2
-- Sa se afiseze pentru fiecare bucatar numele si prenumele acestuia, daca a preparat vreun produs de cand s-a angajat.
-- Daca a preparat minim un produs se vor afisa date corespunzatoare legate de acesta (numele produsului, descrierea acestuia si
-- cat a durat sa il prepare).

CREATE OR REPLACE PROCEDURE afis_durata_preparare_produs
IS 
    CURSOR c_bucatari IS SELECT a.id_angajat, a.nume, a.prenume, b.nr_stele
                         FROM angajat a
                         JOIN bucatar b ON a.id_angajat = b.id_angajat;
    CURSOR c_preparate(p_id_angajat in angajat.id_angajat%TYPE) IS SELECT p.id_produs, p.nume, p.descriere, prep.durata
                                               FROM preparare prep
                                               JOIN produs p ON p.id_produs = prep.id_produs
                                               WHERE prep.id_angajat = p_id_angajat;                    
    TYPE rec IS RECORD (id_ang angajat.id_angajat%TYPE, dur preparare.durata%TYPE);
    TYPE tab_ind IS TABLE OF rec INDEX BY PLS_INTEGER;
    t                           tab_ind;
    v_id_bucatar                angajat.id_angajat%TYPE;
    v_nume_bucatar              angajat.nume%TYPE;
    v_prenume_bucatar           angajat.prenume%TYPE;
    v_nr_stele_bucatar          bucatar.nr_stele%TYPE;
    v_durata_preparare          preparare.durata%TYPE;
    v_id_produs                 produs.id_produs%TYPE;
    v_nume_produs               produs.nume%TYPE;
    v_descriere_produs          produs.descriere%TYPE;
BEGIN
    OPEN c_bucatari;
    LOOP
        FETCH c_bucatari INTO v_id_bucatar, v_nume_bucatar, v_prenume_bucatar, v_nr_stele_bucatar;
        EXIT WHEN c_bucatari%NOTFOUND;
        
        OPEN c_preparate(v_id_bucatar);
        FETCH c_preparate INTO v_id_produs, v_nume_produs, v_descriere_produs, v_durata_preparare;
        
        IF c_preparate%NOTFOUND THEN
            DBMS_OUTPUT.PUT_LINE('ATENȚIE! Bucătarul ' || v_nume_bucatar || ' ' || v_prenume_bucatar || ' nu a preparat niciodată un produs!');
            DBMS_OUTPUT.NEW_LINE();
        ELSE
            DBMS_OUTPUT.PUT_LINE('Bucătarul ' || v_nume_bucatar || ' ' || v_prenume_bucatar || ' a preparat următoarele produse:');
        
            WHILE c_preparate%FOUND
            LOOP
              DBMS_OUTPUT.PUT_LINE(c_preparate%ROWCOUNT || '. Produsul: ' || v_nume_produs || ' ( ' || v_descriere_produs || ' ) a durat ' || v_durata_preparare || ' minute.');
              IF t.EXISTS(v_id_produs) THEN
                  IF v_durata_preparare < t(v_id_produs).dur THEN
                    t(v_id_produs) := rec(v_id_bucatar, v_durata_preparare);
                  END IF;
              ELSE
                  t(v_id_produs) := rec(v_id_bucatar, v_durata_preparare);
              END IF;
              FETCH c_preparate INTO v_id_produs, v_nume_produs, v_descriere_produs, v_durata_preparare;
            END LOOP;
        END IF;
        CLOSE c_preparate;
    END LOOP;   
    CLOSE c_bucatari;    
        
    FOR i IN t.FIRST..t.LAST LOOP
        SELECT nume INTO v_nume_produs
        FROM produs
        WHERE id_produs = i;
        
        SELECT a.nume, a.prenume INTO v_nume_bucatar, v_prenume_bucatar
        FROM angajat a, bucatar b
        WHERE a.id_angajat = t(i).id_ang
        AND a.id_angajat =  b.id_angajat;
        DBMS_OUTPUT.PUT_LINE('Bucatarul ' || v_nume_bucatar || ' ' || v_prenume_bucatar || ' a preparat produsul ' || v_nume_produs || ' in ' || t(i).dur || ' minute(cel mai scurt timp).');
    END LOOP;
END;
/

BEGIN
    afis_durata_preparare_produs();
END;
/

-- Exercitiul 9.3
-- Sa se afiseze profitul generat de un client citit de la tastatura, de-a lungul timpului,
-- Daca acesta a beneficiat de reduceri de-a lungul timpului se va afisa valoarea totala a acestor reduceri.
-- Daca profitul adus de-a lungul timpului este unul negativ inseamna ca clientul a beneficiat de prea multe reduceri
-- si se va afisa un mesaj corespunzator.
-- De asemenea se va afisa  profitul maxim oferit de un client si profitul obtinut de companie pana la momentul actual.

CREATE OR REPLACE FUNCTION profit_client (my_id_client IN client.id_client%TYPE)
RETURN PLS_INTEGER IS
    TYPE tab_ind IS TABLE OF PLS_INTEGER INDEX BY PLS_INTEGER;
    v_nume_client               client.nume%TYPE;
    v_prenume_client            client.nume%TYPE;
    v_nr_telefon_client         client.nr_telefon%TYPE;
    v_profit_maxim_companie     PLS_INTEGER := 0;
    v_profit_maxim_client       PLS_INTEGER := 0;
    v_benef_red                 BINARY_INTEGER := 0;
    v_valoare_red               PLS_INTEGER := 0;
    invalid                     EXCEPTION;
    profit_negativ              EXCEPTION;
    v_exista                    PLS_INTEGER := 0;
    t                           tab_ind;
    v_err_msg                   VARCHAR2(4000);
BEGIN
    SELECT COUNT(*) INTO v_exista
    FROM client
    WHERE id_client = my_id_client;
    IF v_exista = 0 THEN
        RAISE invalid;
    END IF;
    
    SELECT nume, prenume, nr_telefon INTO v_nume_client, v_prenume_client, v_nr_telefon_client
    FROM client
    WHERE id_client = my_id_client;
    
    FOR i IN (SELECT cli.id_client, cli.nume, cli.prenume, cmd.pret, f.valoare, f.detalii 
              FROM client cli, comanda cmd, factura f
              WHERE cli.id_client = cmd.id_client 
              AND cmd.id_factura = f.id_factura) LOOP
        BEGIN
            IF i.id_client = my_id_client AND i.valoare < i.pret THEN
                v_benef_red := 1;
                v_valoare_red := v_valoare_red + (i.pret - i.valoare);
--            ELSIF i.id_client = my_id_client THEN
--                t(i.id_client) := t(i.id_client) + (i.valoare - i.pret);
            END IF;
            v_profit_maxim_companie  := v_profit_maxim_companie  + (i.valoare - i.pret);
            t(i.id_client) := t(i.id_client) + (i.valoare - i.pret);
        EXCEPTION -- pentru prima inserare in tabel
            WHEN NO_DATA_FOUND THEN
                insert into mesaje(cod_mesaj, mesaj, tip_mesaj, creat_de, creat_la)
                values (cod_mesaj.NEXTVAL, 'Prima inserare in tabelul pentru clientul cu id: ' || i.id_client, 'I', USER, sysdate);
                commit;                
                t(i.id_client) := i.valoare - i.pret;
        END;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('Profitul obtinut in urma clientilor de pana acum este de ' || v_profit_maxim_companie || ' lei.');
    FOR i IN 1..t.LAST LOOP
        IF  t(i) > v_profit_maxim_client THEN
            v_profit_maxim_client := t(i);
        END IF;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('Profitul maxim adus de un client este de ' || v_profit_maxim_client || ' lei.');
    DBMS_OUTPUT.PUT_LINE('Clientul cu id-ul ' || my_id_client || ' este ' || v_nume_client || ' ' || v_prenume_client || ' cu nr de telefon: ' || v_nr_telefon_client || '.');
    IF v_benef_red = 1 THEN
        DBMS_OUTPUT.PUT_LINE('A beneficiat de reduceri in valoare de ' || v_valoare_red || ' lei.');
    ELSE
        DBMS_OUTPUT.PUT_LINE('Nu beneficiaza de reduceri!');
    END IF;
    IF t.EXISTS(my_id_client) AND t(my_id_client) < 0 THEN
        RAISE profit_negativ;
    END IF;
    RETURN t(my_id_client);
EXCEPTION
    WHEN invalid THEN
        insert into mesaje(cod_mesaj, mesaj, tip_mesaj, creat_de, creat_la)
        values (cod_mesaj.NEXTVAL, 'Client inexistent cu id=' || my_id_client, 'E', USER, sysdate);
        commit;
        RAISE_APPLICATION_ERROR(-20021, 'Nu a fost gasit niciun client cu id-ul introdus!');
    WHEN profit_negativ THEN
        insert into mesaje(cod_mesaj, mesaj, tip_mesaj, creat_de, creat_la)
        values (cod_mesaj.NEXTVAL, 'Profit negativ pentru clientul ' || my_id_client, 'I', USER, sysdate);
        commit;
        RAISE_APPLICATION_ERROR(-20022, 'Acest client a generat un profit negativ (prea multe reduceri)!');
    WHEN OTHERS THEN
        v_err_msg := 'Alta eroare la profit_client, cod Oracle: ' || SQLERRM;
        insert into mesaje(cod_mesaj, mesaj, tip_mesaj, creat_de, creat_la)
        values (cod_mesaj.NEXTVAL, v_err_msg, 'E', USER, sysdate);
        commit;
        RAISE_APPLICATION_ERROR(-20022, 'Alta eroare!');
END;
/

DECLARE
    v_id_client_citit       client.id_client%TYPE := &client_id;
    v_rezultat              PLS_INTEGER;
    
BEGIN
    v_rezultat := profit_client(v_id_client_citit);
    IF v_rezultat > 0 THEN
        DBMS_OUTPUT.PUT_LINE('El a contribuit la profitul companiei pana acum cu ' || v_rezultat || ' lei.');
    ELSE
        DBMS_OUTPUT.PUT_LINE('Acesta a beneficiat de prea multe reduceri! Aducand un profit negativ companiei: ' || v_rezultat || ' lei.');
    END IF;
END;

DELETE FROM continut_comanda WHERE id_comanda = 7;
DELETE FROM continut_comanda WHERE id_comanda = 8;
DELETE FROM continut_comanda WHERE id_comanda = 9;
DELETE FROM continut_comanda WHERE id_comanda = 10;
DELETE FROM continut_comanda WHERE id_comanda = 1000;
DELETE FROM continut_comanda WHERE id_comanda = 21;
DELETE FROM continut_comanda WHERE id_comanda = 22;
DELETE FROM factura WHERE id_factura = 1000;

DELETE FROM comanda WHERE id_comanda = 7;
DELETE FROM comanda WHERE id_comanda = 8;
DELETE FROM comanda WHERE id_comanda = 9;
DELETE FROM comanda WHERE id_comanda = 10;
DELETE FROM comanda WHERE id_comanda = 1000;
DELETE FROM comanda WHERE id_comanda = 21;
DELETE FROM comanda WHERE id_comanda = 22;

rollback;
COMMIT;

-- Exercitiul 9.4
-- Sa se creeze un Trigger care nu permite clientilor sa plaseze comenzi de Craciun, 25 decembrie si de Anul Nou, 1 ianurie; 
-- astfel incat inainte de a insera in tabelul comanda sa se arunce o eroarea daca ziua este una din cele mentionate anterior.

CREATE OR REPLACE TRIGGER trig_vacanta BEFORE
    INSERT ON comanda
DECLARE
    ziua   NUMBER := extract(DAY FROM sysdate);
    luna   NUMBER := extract(MONTH FROM sysdate);
BEGIN
    IF ( ziua = 25 AND luna = 12 ) OR ( ziua = 1 AND luna = 1 ) THEN
        raise_application_error(-20067, 'Astazi nu se pot plasa comenzi, este zi libera!');
    END IF;
END;
/

insert into comanda (id_comanda, id_client, id_factura, pret)
values (id_comanda.nextval, 1, 4, 50);

-- Exercitiul 9.5
CREATE OR REPLACE TRIGGER trig_produs_in_meniu FOR
    INSERT OR UPDATE OF id_produs ON continut_comanda
COMPOUND TRIGGER
    v_id_restaurant meniu.id_restaurant%TYPE;
    BEFORE STATEMENT IS BEGIN
        dbms_output.put_line('Verificare daca produs exista in meniu');
    END BEFORE STATEMENT;
    BEFORE EACH ROW IS BEGIN
        SELECT
            id_restaurant
        INTO v_id_restaurant
        FROM
            meniu m
        WHERE
            m.id_produs = :new.id_produs;

        dbms_output.put_line('Aces produs se afla doar in meniul restaurantului ' || v_id_restaurant);
    EXCEPTION
        WHEN no_data_found THEN
            raise_application_error(-20065, 'Acest produs nu exista in niciun meniu');
        WHEN too_many_rows THEN
            dbms_output.put_line('Acest produs se afla in meniurile mai multor restaurante');
    END BEFORE EACH ROW;
    AFTER EACH ROW IS BEGIN
        dbms_output.put_line('Produsul cu id '
                             || :new.id_produs
                             || ' in comanda');
    END AFTER EACH ROW;
    AFTER STATEMENT IS BEGIN
        dbms_output.put_line('Verificare completa. Pofta buna!');
    END AFTER STATEMENT;
END trig_produs_in_meniu;
/

insert into continut_comanda (id_produs, id_comanda, numar_produse)
values (6, 4, 2); --nu se poate insera un produs care nu apare in niciun meniu

--select * from produs where id_produs = 6;
--select * from continut_comanda where id_produs = 6;

delete from continut_comanda
where id_produs = 6 and id_comanda = 4;

insert into continut_comanda (id_produs, id_comanda, numar_produse)
values (1, 6, 2); --in meniul carui restaurant apare produsul (doar in restaurant 4)

--select r.id_restaurant, r.nume from restaurant r, meniu m
--where r.id_restaurant = m.id_restaurant
--and m.id_produs = 1;

delete from continut_comanda
where id_produs = 1 and id_comanda = 6;

insert into continut_comanda (id_produs, id_comanda, numar_produse)
values (4, 3, 2); --produs care se afla in mai multe meniuri

--select r.id_restaurant, r.nume from restaurant r, meniu m
--where r.id_restaurant = m.id_restaurant
--and m.id_produs = 4;

delete from continut_comanda
where id_produs = 4 and id_comanda = 3;

-- Un client nu poate aștepta mai mult decât 300 minute pentru ca comanda sa să fie preparată. 
-- Dacă timpul de prepare este mai mare decât 300 minute să se arunce o eroare la inserarea în tabelul preparare.

CREATE OR REPLACE TRIGGER trig_timp_prep BEFORE
    INSERT OR UPDATE OF durata ON preparare
    FOR EACH ROW
BEGIN
    IF :new.durata > 300 THEN
        raise_application_error(-20086, 'timp de preparare prea mare!');
    END IF;
END;
/

insert into preparare (id_produs, id_comanda, id_angajat, durata)
values (1, 1, 17, 600);

-- Exercitiul 9.6
CREATE OR REPLACE TRIGGER trig_ldd_client BEFORE DROP ON SCHEMA BEGIN
    IF lower(ora_dict_obj_name) = lower('Client') THEN
        raise_application_error(-20777, 'Nu aveti voie sa stergeti tabela cu clienti');
    END IF;
END;
/

drop table client;

--SELECT * from preparare;

-- Exercitiul 9.7
CREATE OR REPLACE PACKAGE pachet_cerinte IS
    FUNCTION afis_produse_preferate (my_id_client IN client.id_client%TYPE) RETURN result_obj;
    PROCEDURE afis_durata_preparare_produs;
    FUNCTION profit_client (my_id_client IN client.id_client%TYPE) RETURN PLS_INTEGER;
END pachet_cerinte;
/

CREATE OR REPLACE PACKAGE BODY pachet_cerinte AS
    FUNCTION afis_produse_preferate (my_id_client IN client.id_client%TYPE)
    RETURN result_obj IS
        TYPE tab_ind IS TABLE OF PLS_INTEGER INDEX BY PLS_INTEGER;
        v_contor                    tab_ind;
        varray_ids                  t_array;
        v_index_max                 PLS_INTEGER;
        v_index_min                 PLS_INTEGER;
        id                          PLS_INTEGER;
        v_id_feluri_preferate       tab_imb;
        ok                          BINARY_INTEGER := 0;
        client_fara_comenzi         EXCEPTION;
        v_err_msg                   VARCHAR2(4000);
    BEGIN
        v_id_feluri_preferate := tab_imb();
        varray_ids := t_array();
        
        FOR i IN (SELECT p.id_produs, cont.numar_produse -- CURSOR IMPLICIT
                  FROM produs p, continut_comanda cont, comanda cmd
                  WHERE my_id_client = cmd.id_client
                  AND cont.id_produs = p.id_produs
                  AND cmd.id_comanda = cont.id_comanda) LOOP BEGIN
            v_contor(i.id_produs) := v_contor(i.id_produs) + i.numar_produse; -- simulez un vector de frecventa, unde tin de cate ori a fost comandat produsul respectiv
            IF ok = 1 THEN
                IF v_contor(i.id_produs) > v_contor(v_index_max) THEN
                    v_index_max := i.id_produs;
                END IF;
            END IF;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN -- intr-un tabel indexat daca nu exista indexul respectiv
            -- se arunca exceptia no data found
                v_contor(i.id_produs) := i.numar_produse; -- initializam numarul de aparitii cu 1
                IF ok = 0 THEN -- daca e primul produs selectat de cursor
                    ok := 1;
                    v_index_max := i.id_produs;
                END IF;
        END;
        END LOOP;
        IF ok = 0 THEN
            RAISE client_fara_comenzi;
        ELSE
            v_index_min := v_contor.FIRST;
            
            IF v_index_min IS NOT NULL THEN
                id := v_index_min;
                LOOP
                    EXIT WHEN id IS NULL;
                    IF v_contor(id) < v_contor(v_index_min) THEN
                        v_index_min := id;
                    END IF;
                    
                    id := v_contor.NEXT(id);
                END LOOP;
            END IF;
            
            IF v_contor(v_index_max) != v_contor(v_index_min) THEN
--                DBMS_OUTPUT.PUT_LINE('v_index_max: ' || v_index_max);
--                DBMS_OUTPUT.PUT_LINE('v_contor(v_index_max): ' || v_contor(v_index_max));
--                DBMS_OUTPUT.PUT_LINE('v_index_min: ' || v_index_min);
--                DBMS_OUTPUT.PUT_LINE('v_contor(v_index_min): ' || v_contor(v_index_min));
                id := v_contor.first; -- prima valoare din tabelul indexat (vector frecventa)
                LOOP
                    EXIT WHEN id IS NULL;
                    IF v_contor(id) = v_contor(v_index_max) THEN
                        v_id_feluri_preferate.extend;
                        v_id_feluri_preferate(v_id_feluri_preferate.LAST) := id;
                    END IF;
                    
                    IF v_contor(id) = v_contor(v_index_min) THEN
                        IF varray_ids.COUNT < varray_ids.LIMIT THEN
                            varray_ids.EXTEND;
                            varray_ids(varray_ids.LAST) := id;
                        END IF;
                    END IF;
                    id := v_contor.NEXT(id);
                END LOOP;
            ELSE
                id := v_contor.first; -- prima valoare din tabelul indexat (vector frecventa)
                LOOP
                    EXIT WHEN id IS NULL;
                    IF v_contor(id) = v_contor(v_index_max) THEN
                        v_id_feluri_preferate.extend;
                        v_id_feluri_preferate(v_id_feluri_preferate.LAST) := id;
                    END IF;
                    id := v_contor.NEXT(id);
                END LOOP;
            END IF;
        END IF;
        RETURN result_obj(v_id_feluri_preferate, varray_ids);
    
    EXCEPTION
        WHEN client_fara_comenzi THEN
            INSERT INTO mesaje(cod_mesaj, mesaj, tip_mesaj, creat_de, creat_la)
            VALUES (cod_mesaj.NEXTVAL, 'Pentru clientul dat de la tastatura cu id ' || my_id_client || ' nu s-a gasit nicio comanda!', 'W', USER, SYSDATE);
            COMMIT;
            DBMS_OUTPUT.PUT_LINE('Acest client nu a comandat nimic in viata lui!');
        WHEN OTHERS THEN
            v_err_msg := 'Alta eroare in afis_produse_preferate: ' || SQLERRM;
            INSERT INTO mesaje(cod_mesaj, mesaj, tip_mesaj, creat_de, creat_la)
            VALUES (cod_mesaj.NEXTVAL, 'Alta eroare in afis_produse_preferate: ' || v_err_msg, 'E', USER, SYSDATE);
            COMMIT;
    END;
    
    PROCEDURE afis_durata_preparare_produs
    IS 
        CURSOR c_bucatari IS SELECT a.id_angajat, a.nume, a.prenume, b.nr_stele
                             FROM angajat a
                             JOIN bucatar b ON a.id_angajat = b.id_angajat;
        CURSOR c_preparate(p_id_angajat in angajat.id_angajat%TYPE) IS SELECT p.id_produs, p.nume, p.descriere, prep.durata
                                                   FROM preparare prep
                                                   JOIN produs p ON p.id_produs = prep.id_produs
                                                   WHERE prep.id_angajat = p_id_angajat;                    
        TYPE rec IS RECORD (id_ang angajat.id_angajat%TYPE, dur preparare.durata%TYPE);
        TYPE tab_ind IS TABLE OF rec INDEX BY PLS_INTEGER;
        t                           tab_ind;
        v_id_bucatar                angajat.id_angajat%TYPE;
        v_nume_bucatar              angajat.nume%TYPE;
        v_prenume_bucatar           angajat.prenume%TYPE;
        v_nr_stele_bucatar          bucatar.nr_stele%TYPE;
        v_durata_preparare          preparare.durata%TYPE;
        v_id_produs                 produs.id_produs%TYPE;
        v_nume_produs               produs.nume%TYPE;
        v_descriere_produs          produs.descriere%TYPE;
    BEGIN
        OPEN c_bucatari;
        LOOP
            FETCH c_bucatari INTO v_id_bucatar, v_nume_bucatar, v_prenume_bucatar, v_nr_stele_bucatar;
            EXIT WHEN c_bucatari%NOTFOUND;
            
            OPEN c_preparate(v_id_bucatar);
            FETCH c_preparate INTO v_id_produs, v_nume_produs, v_descriere_produs, v_durata_preparare;
            
            IF c_preparate%NOTFOUND THEN
                DBMS_OUTPUT.PUT_LINE('ATENȚIE! Bucătarul ' || v_nume_bucatar || ' ' || v_prenume_bucatar || ' nu a preparat niciodată un produs!');
                DBMS_OUTPUT.NEW_LINE();
            ELSE
                DBMS_OUTPUT.PUT_LINE('Bucătarul ' || v_nume_bucatar || ' ' || v_prenume_bucatar || ' a preparat următoarele produse:');
            
                WHILE c_preparate%FOUND
                LOOP
                  DBMS_OUTPUT.PUT_LINE(c_preparate%ROWCOUNT || '. Produsul: ' || v_nume_produs || ' ( ' || v_descriere_produs || ' ) a durat ' || v_durata_preparare || ' minute.');
                  IF t.EXISTS(v_id_produs) THEN
                      IF v_durata_preparare < t(v_id_produs).dur THEN
                        t(v_id_produs) := rec(v_id_bucatar, v_durata_preparare);
                      END IF;
                  ELSE
                      t(v_id_produs) := rec(v_id_bucatar, v_durata_preparare);
                  END IF;
                  FETCH c_preparate INTO v_id_produs, v_nume_produs, v_descriere_produs, v_durata_preparare;
                END LOOP;
            END IF;
            CLOSE c_preparate;
        END LOOP;   
        CLOSE c_bucatari;    
            
        FOR i IN t.FIRST..t.LAST LOOP
            SELECT nume INTO v_nume_produs
            FROM produs
            WHERE id_produs = i;
            
            SELECT a.nume, a.prenume INTO v_nume_bucatar, v_prenume_bucatar
            FROM angajat a, bucatar b
            WHERE a.id_angajat = t(i).id_ang
            AND a.id_angajat =  b.id_angajat;
            DBMS_OUTPUT.PUT_LINE('Bucatarul ' || v_nume_bucatar || ' ' || v_prenume_bucatar || ' a preparat produsul ' || v_nume_produs || ' in ' || t(i).dur || ' minute(cel mai scurt timp).');
        END LOOP;
    END;

    FUNCTION profit_client (my_id_client IN client.id_client%TYPE)
    RETURN PLS_INTEGER IS
        TYPE tab_ind IS TABLE OF PLS_INTEGER INDEX BY PLS_INTEGER;
        v_nume_client               client.nume%TYPE;
        v_prenume_client            client.nume%TYPE;
        v_nr_telefon_client         client.nr_telefon%TYPE;
        v_profit_maxim_companie     PLS_INTEGER := 0;
        v_profit_maxim_client       PLS_INTEGER := 0;
        v_benef_red                 BINARY_INTEGER := 0;
        v_valoare_red               PLS_INTEGER := 0;
        invalid                     EXCEPTION;
        profit_negativ              EXCEPTION;
        v_exista                    PLS_INTEGER := 0;
        t                           tab_ind;
        v_err_msg                   VARCHAR2(4000);
    BEGIN
        SELECT COUNT(*) INTO v_exista
        FROM client
        WHERE id_client = my_id_client;
        IF v_exista = 0 THEN
            RAISE invalid;
        END IF;
        
        SELECT nume, prenume, nr_telefon INTO v_nume_client, v_prenume_client, v_nr_telefon_client
        FROM client
        WHERE id_client = my_id_client;
        
        FOR i IN (SELECT cli.id_client, cli.nume, cli.prenume, cmd.pret, f.valoare, f.detalii 
                  FROM client cli, comanda cmd, factura f
                  WHERE cli.id_client = cmd.id_client 
                  AND cmd.id_factura = f.id_factura) LOOP
            BEGIN
                IF i.id_client = my_id_client AND i.valoare < i.pret THEN
                    v_benef_red := 1;
                    v_valoare_red := v_valoare_red + (i.pret - i.valoare);
--                ELSIF i.id_client = my_id_client THEN
--                    t(i.id_client) := t(i.id_client) + (i.valoare - i.pret);
                END IF;
                v_profit_maxim_companie  := v_profit_maxim_companie  + (i.valoare - i.pret);
                t(i.id_client) := t(i.id_client) + (i.valoare - i.pret);
            EXCEPTION -- pentru prima inserare in tabel
                WHEN NO_DATA_FOUND THEN
                    insert into mesaje(cod_mesaj, mesaj, tip_mesaj, creat_de, creat_la)
                    values (cod_mesaj.NEXTVAL, 'Prima inserare in tabelul pentru clientul cu id: ' || i.id_client, 'I', USER, sysdate);
                    commit;                
                    t(i.id_client) := i.valoare - i.pret;
            END;
        END LOOP;
        DBMS_OUTPUT.PUT_LINE('Profitul obtinut in urma clientilor de pana acum este de ' || v_profit_maxim_companie || ' lei.');
        FOR i IN 1..t.LAST LOOP
            IF  t(i) > v_profit_maxim_client THEN
                v_profit_maxim_client := t(i);
            END IF;
        END LOOP;
        DBMS_OUTPUT.PUT_LINE('Profitul maxim adus de un client este de ' || v_profit_maxim_client || ' lei.');
        DBMS_OUTPUT.PUT_LINE('Clientul cu id-ul ' || my_id_client || ' este ' || v_nume_client || ' ' || v_prenume_client || ' cu nr de telefon: ' || v_nr_telefon_client || '.');
        IF v_benef_red = 1 THEN
            DBMS_OUTPUT.PUT_LINE('A beneficiat de reduceri in valoare de ' || v_valoare_red || ' lei.');
        ELSE
            DBMS_OUTPUT.PUT_LINE('Nu beneficiaza de reduceri!');
        END IF;
        IF t.EXISTS(my_id_client) AND t(my_id_client) < 0 THEN
            RAISE profit_negativ;
        END IF;
        RETURN t(my_id_client);
    EXCEPTION
        WHEN invalid THEN
            insert into mesaje(cod_mesaj, mesaj, tip_mesaj, creat_de, creat_la)
            values (cod_mesaj.NEXTVAL, 'Client inexistent cu id=' || my_id_client, 'E', USER, sysdate);
            commit;
            RAISE_APPLICATION_ERROR(-20021, 'Nu a fost gasit niciun client cu id-ul introdus!');
        WHEN profit_negativ THEN
            insert into mesaje(cod_mesaj, mesaj, tip_mesaj, creat_de, creat_la)
            values (cod_mesaj.NEXTVAL, 'Profit negativ pentru clientul ' || my_id_client, 'I', USER, sysdate);
            commit;
            RAISE_APPLICATION_ERROR(-20022, 'Acest client a generat un profit negativ (prea multe reduceri)!');
        WHEN OTHERS THEN
            v_err_msg := 'Alta eroare la profit_client, cod Oracle: ' || SQLERRM;
            insert into mesaje(cod_mesaj, mesaj, tip_mesaj, creat_de, creat_la)
            values (cod_mesaj.NEXTVAL, v_err_msg, 'E', USER, sysdate);
            commit;
            RAISE_APPLICATION_ERROR(-20022, 'Alta eroare!');
    END;
END pachet_cerinte;
/

-- Exercitiul 9.1 Apel din pachet
DECLARE
    v_id_client_citit       client.id_client%TYPE := &client_id;
    v_result                result_obj;
    my_tab                  tab_imb;
    my_varray               t_array;
    id                      PLS_INTEGER;
    v_nume_produs           produs.nume%TYPE;
    v_nume                  client.nume%TYPE;
    v_prenume               client.prenume%TYPE;
    v_contor                PLS_INTEGER := 0;
BEGIN
    v_result := pachet_cerinte.afis_produse_preferate(v_id_client_citit);
    my_tab := v_result.v_id_feluri_preferate;
    my_varray := v_result.varray_ids;
    
    SELECT c.nume, c.prenume INTO v_nume, v_prenume
    FROM client c
    WHERE c.id_client = v_id_client_citit;
    DBMS_OUTPUT.PUT_LINE('Clientul ' || v_nume || ' ' || v_prenume || ' are urmatoarele produse favorite:');
    id := my_tab.FIRST; -- prima valoare din tabelul indexat (vector frecventa)
    LOOP
        EXIT WHEN id IS NULL;
        SELECT p.nume INTO v_nume_produs
        FROM produs p
        WHERE p.id_produs = my_tab(id);
        -- afisam produsele cu numarul maxim de aparitii
        v_contor := v_contor + 1;
        DBMS_OUTPUT.PUT_LINE(v_contor || '. ' || v_nume_produs);
        id := my_tab.NEXT(id);
    END LOOP;
    

    IF my_varray.COUNT = 0 THEN
        DBMS_OUTPUT.PUT_LINE('Niciun produs nu a fost comandat de mai putine ori fata de celelalte.');
    ELSE
        DBMS_OUTPUT.PUT_LINE('');
        DBMS_OUTPUT.PUT_LINE('Produse cel mai putin comandate: ');
        v_contor := 0;
        FOR idx IN 1..my_varray.COUNT LOOP
            SELECT p.nume
              INTO v_nume_produs
              FROM produs p
             WHERE p.id_produs = my_varray(idx);
            v_contor := v_contor + 1;
            DBMS_OUTPUT.PUT_LINE(v_contor || '. ' || v_nume_produs);
        END LOOP;
    END IF;
END;
/

-- Exercitiul 9.2 Apel din pachet
BEGIN
    pachet_cerinte.afis_durata_preparare_produs();
END;
/

-- Exercitiul 9.3 Apel din pachet
DECLARE
    v_id_client_citit       client.id_client%TYPE := &client_id;
    v_rezultat              PLS_INTEGER;
    
BEGIN
    v_rezultat := pachet_cerinte.profit_client(v_id_client_citit);
    IF v_rezultat > 0 THEN
        DBMS_OUTPUT.PUT_LINE('El a contribuit la profitul companiei pana acum cu ' || v_rezultat || ' lei.');
    ELSE
        DBMS_OUTPUT.PUT_LINE('Acesta a beneficiat de prea multe reduceri! Aducand un profit negativ companiei: ' || v_rezultat || ' lei.');
    END IF;
END;
/

select * from mesaje;
